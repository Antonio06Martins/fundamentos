Aqui está uma tradução do código fornecido para Java 17 com Spring:

java
Copy code
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

@RestController
public class WebhookController {

    @PostMapping("/webhook")
    public String handleWebhook(@RequestBody String body, @RequestHeader("Digest") String digestHeader,
                                @RequestHeader("Host") String hostHeader, @RequestHeader("Signature") String signatureHeader,
                                @RequestHeader("Signature-Input") String signatureInputHeader) {
        try {
            // Parse dos valores do header Signature-Input
            String[] signatureInputParts = signatureInputHeader.split(";");
            String created = null;
            String nonce = null;
            for (String part : signatureInputParts) {
                String[] keyValue = part.split("=");
                if (keyValue.length == 2) {
                    String key = keyValue[0].trim();
                    String value = keyValue[1].replaceAll("\"", "").trim();
                    if (key.equals("created")) {
                        created = value;
                    } else if (key.equals("nonce")) {
                        nonce = value;
                    }
                }
            }

            // Verificar se a assinatura usa o algoritmo esperado
            if (!signatureInputHeader.contains("alg=\"hmac-sha256\"")) {
                throw new IllegalArgumentException("Algoritmo de assinatura inválido");
            }

            // Obter o secret para verificar a assinatura
            String secret = "your-secret-key";

            // Obter o valor da mensagem
            String message = "digest: " + digestHeader + "\nhost: " + hostHeader + "\n";

            // Gerar a signature esperada usando HMAC-SHA256
            Mac hmacSha256 = Mac.getInstance("HmacSHA256");
            SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            hmacSha256.init(secretKeySpec);
            String dataToSign = message + created + nonce + ":"; // adicione os parâmetros extras, se necessário
            byte[] signatureBytes = hmacSha256.doFinal(dataToSign.getBytes(StandardCharsets.UTF_8));
            String expectedSignature = Base64.getEncoder().encodeToString(signatureBytes);

            // Comparar as signatures para verificar a autenticidade da mensagem
            if (!expectedSignature.equals(signatureHeader)) {
                throw new IllegalArgumentException("Assinatura inválida");
            }

            // Se a assinatura for válida, processar a mensagem
            return "Mensagem autenticada com sucesso!";
        } catch (NoSuchAlgorithmException | IllegalArgumentException | IllegalStateException | java.security.InvalidKeyException e) {
            e.printStackTrace(); // Trate as exceções de acordo com a sua lógica de negócio
            return "Erro ao processar a mensagem";
        }
    }
}
Certifique-se de configurar corretamente o endpoint do seu webhook no Spring Boot, e ajuste os manipuladores de exceção de acordo com sua lógica de negócio.



User
Um detalhe o body é um objeto com id e nome do tipo String e mais um Map que pode conter valores diversos e outros tipos tbm 
ChatGPT
Entendi, você pode modificar o método handleWebhook para receber um objeto que corresponde à estrutura do corpo da mensagem. Aqui está a versão atualizada:

java
Copy code
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Map;

@RestController
public class WebhookController {

    @PostMapping("/webhook")
    public String handleWebhook(@RequestBody WebhookRequest webhookRequest, @RequestHeader("Digest") String digestHeader,
                                @RequestHeader("Host") String hostHeader, @RequestHeader("Signature") String signatureHeader,
                                @RequestHeader("Signature-Input") String signatureInputHeader) {
        try {
            // Parse dos valores do header Signature-Input
            String[] signatureInputParts = signatureInputHeader.split(";");
            String created = null;
            String nonce = null;
            for (String part : signatureInputParts) {
                String[] keyValue = part.split("=");
                if (keyValue.length == 2) {
                    String key = keyValue[0].trim();
                    String value = keyValue[1].replaceAll("\"", "").trim();
                    if (key.equals("created")) {
                        created = value;
                    } else if (key.equals("nonce")) {
                        nonce = value;
                    }
                }
            }

            // Verificar se a assinatura usa o algoritmo esperado
            if (!signatureInputHeader.contains("alg=\"hmac-sha256\"")) {
                throw new IllegalArgumentException("Algoritmo de assinatura inválido");
            }

            // Obter o secret para verificar a assinatura
            String secret = "your-secret-key";

            // Obter o valor da mensagem
            String message = "digest: " + digestHeader + "\nhost: " + hostHeader + "\n";

            // Gerar a signature esperada usando HMAC-SHA256
            Mac hmacSha256 = Mac.getInstance("HmacSHA256");
            SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            hmacSha256.init(secretKeySpec);
            String dataToSign = message + created + nonce + ":"; // adicione os parâmetros extras, se necessário
            byte[] signatureBytes = hmacSha256.doFinal(dataToSign.getBytes(StandardCharsets.UTF_8));
            String expectedSignature = Base64.getEncoder().encodeToString(signatureBytes);

            // Comparar as signatures para verificar a autenticidade da mensagem
            if (!expectedSignature.equals(signatureHeader)) {
                throw new IllegalArgumentException("Assinatura inválida");
            }

            // Se a assinatura for válida, processar a mensagem
            // Faça o processamento da mensagem aqui
            return "Mensagem autenticada com sucesso!";
        } catch (NoSuchAlgorithmException | IllegalArgumentException | IllegalStateException | java.security.InvalidKeyException e) {
            e.printStackTrace(); // Trate as exceções de acordo com a sua lógica de negócio
            return "Erro ao processar a mensagem";
        }
    }
}

class WebhookRequest {
    private String id;
    private String nome;
    private Map<String, Object> outrosDados;

    // Getters e setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public Map<String, Object> getOutrosDados() {
        return outrosDados;
    }

    public void setOutrosDados(Map<String, Object> outrosDados) {
        this.outrosDados = outrosDados;
    }
}
Certifique-se de que a classe WebhookRequest corresponda à estrutura do corpo da mensagem que você espera receber.

User
Retornando status 401 caso hash inválido 
ChatGPT
Para retornar um status 401 em caso de hash inválido, você pode usar a classe ResponseEntity do Spring. Aqui está o código atualizado:

java
Copy code
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Map;

@RestController
public class WebhookController {

    @PostMapping("/webhook")
    public ResponseEntity<String> handleWebhook(@RequestBody WebhookRequest webhookRequest, @RequestHeader("Digest") String digestHeader,
                                @RequestHeader("Host") String hostHeader, @RequestHeader("Signature") String signatureHeader,
                                @RequestHeader("Signature-Input") String signatureInputHeader) {
        try {
            // Parse dos valores do header Signature-Input
            String[] signatureInputParts = signatureInputHeader.split(";");
            String created = null;
            String nonce = null;
            for (String part : signatureInputParts) {
                String[] keyValue = part.split("=");
                if (keyValue.length == 2) {
                    String key = keyValue[0].trim();
                    String value = keyValue[1].replaceAll("\"", "").trim();
                    if (key.equals("created")) {
                        created = value;
                    } else if (key.equals("nonce")) {
                        nonce = value;
                    }
                }
            }

            // Verificar se a assinatura usa o algoritmo esperado
            if (!signatureInputHeader.contains("alg=\"hmac-sha256\"")) {
                throw new IllegalArgumentException("Algoritmo de assinatura inválido");
            }

            // Obter o secret para verificar a assinatura
            String secret = "your-secret-key";

            // Obter o valor da mensagem
            String message = "digest: " + digestHeader + "\nhost: " + hostHeader + "\n";

            // Gerar a signature esperada usando HMAC-SHA256
            Mac hmacSha256 = Mac.getInstance("HmacSHA256");
            SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            hmacSha256.init(secretKeySpec);
            String dataToSign = message + created + nonce + ":"; // adicione os parâmetros extras, se necessário
            byte[] signatureBytes = hmacSha256.doFinal(dataToSign.getBytes(StandardCharsets.UTF_8));
            String expectedSignature = Base64.getEncoder().encodeToString(signatureBytes);

            // Comparar as signatures para verificar a autenticidade da mensagem
            if (!expectedSignature.equals(signatureHeader)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Assinatura inválida");
            }

            // Se a assinatura for válida, processar a mensagem
            // Faça o processamento da mensagem aqui
            return ResponseEntity.ok("Mensagem autenticada com sucesso!");
        } catch (NoSuchAlgorithmException | IllegalArgumentException | IllegalStateException | java.security.InvalidKeyException e) {
            e.printStackTrace(); // Trate as exceções de acordo com a sua lógica de negócio
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao processar a mensagem");
        }
    }
}
Este código retornará um status 401 (UNAUTHORIZED) se a assinatura for inválida. Se ocorrerem outras exceções durante o processamento, será retornado um status 500 (INTERNAL_SERVER_ERROR). Certifique-se de tratar essas respostas adequadamente no lado do cliente.

User
Somente validando o digestHeader com o body da mensagem 
ChatGPT
Entendi, se você deseja validar apenas o header Digest com o corpo da mensagem, você pode simplificar o código da seguinte maneira:

java
Copy code
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

@RestController
public class WebhookController {

    @PostMapping("/webhook")
    public ResponseEntity<String> handleWebhook(@RequestBody WebhookRequest webhookRequest, @RequestHeader("Digest") String digestHeader) {
        try {
            // Calcula o digest do corpo da mensagem
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(webhookRequest.toString().getBytes(StandardCharsets.UTF_8));
            String hashedBody = "SHA-256=" + Base64.getEncoder().encodeToString(hashBytes);

            // Comparar os digests para verificar a autenticidade da mensagem
            if (!hashedBody.equals(digestHeader)) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Digest inválido");
            }

            // Se o digest for válido, processar a mensagem
            // Faça o processamento da mensagem aqui
            return ResponseEntity.ok("Mensagem autenticada com sucesso!");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace(); // Trate as exceções de acordo com a sua lógica de negócio
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao processar a mensagem");
        }
    }
}
Neste código, a função handleWebhook recebe o corpo da mensagem (webhookRequest) e o header Digest. O corpo da mensagem é convertido em uma string e calculado o digest SHA-256. Em seguida, é comparado com o digest recebido no header. Se forem iguais, a mensagem é considerada autenticada e o código de status 200 é retornado. Caso contrário, é retornado um código de status 401 (UNAUTHORIZED).

User
consigo usar algum intercepto para realizar essa validação e depois caso valido continuar a minha chamada ao controller ? 
ChatGPT
Sim, você pode usar um interceptor em Spring MVC para realizar a validação do digest antes de chamar o método do controller. Aqui está um exemplo de como você pode implementar um interceptor para fazer isso:

java
Copy code
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class DigestValidationInterceptor extends HandlerInterceptorAdapter {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        // Obter o valor do header Digest
        String digestHeader = request.getHeader("Digest");
        if (digestHeader == null) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Header Digest ausente");
            return false;
        }

        // Obter o corpo da mensagem
        String requestBody = request.getReader().lines().reduce("", (accumulator, actual) -> accumulator + actual);

        // Calcula o digest do corpo da mensagem
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(requestBody.getBytes(StandardCharsets.UTF_8));
            String hashedBody = "SHA-256=" + Base64.getEncoder().encodeToString(hashBytes);

            // Comparar os digests para verificar a autenticidade da mensagem
            if (!hashedBody.equals(digestHeader)) {
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Digest inválido");
                return false;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Erro ao processar o digest");
            return false;
        }

        // Se o digest for válido, continuar com a chamada ao controller
        return true;
    }
}
Este é um exemplo básico de um interceptor que verifica o header Digest e o compara com o digest do corpo da mensagem. Se o digest for válido, ele permite que a chamada continue para o controller; caso contrário, retorna um código de status 401 (UNAUTHORIZED) com uma mensagem de erro.

Para usar este interceptor, você precisa registrá-lo no seu contexto Spring. Você pode fazer isso no seu arquivo de configuração do Spring MVC (WebConfig.java ou MvcConfig.java), como abaixo:

java
Copy code
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new DigestValidationInterceptor()).addPathPatterns("/webhook");
    }
}
Com isso, o interceptor será acionado antes que a requisição chegue ao método do controller. Ele interceptará a requisição, validará o digest e, se for válido, permitirá que a chamada continue para o controller. Caso contrário, retornará uma resposta de erro.

User
tem com especificar a rota nesse intercepto ? as demais rotas não precisam desta validação 
ChatGPT
Sim, você pode especificar a rota ou o padrão de rota que deseja para que o interceptor seja aplicado. No exemplo anterior, o interceptor foi registrado para a rota "/webhook". Se você quiser aplicá-lo apenas para essa rota e permitir que outras rotas não tenham essa validação, você pode registrar o interceptor apenas para essa rota, conforme mostrado abaixo:

java
Copy code
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new DigestValidationInterceptor())
                .addPathPatterns("/webhook");
    }
}
Dessa forma, o interceptor será aplicado apenas para a rota "/webhook" e as demais rotas não terão essa validação. Se você precisar aplicar o interceptor para mais rotas, basta adicionar mais chamadas addPathPatterns com os padrões de rota desejados. Por exemplo:

java
Copy code
registry.addInterceptor(new DigestValidationInterceptor())
        .addPathPatterns("/webhook")
        .addPathPatterns("/outra-rota");
Com isso, o interceptor será aplicado tanto para "/webhook" quanto para "/outra-rota", e as demais rotas não terão essa validação.

User
validando todos os dados @RequestBody WebhookRequest webhookRequest, @RequestHeader("Digest") String digestHeader,
                                @RequestHeader("Host") String hostHeader, @RequestHeader("Signature") String signatureHeader,
                                @RequestHeader("Signature-Input") String signatureInputHeader
ChatGPT
Se você deseja validar todos os dados do corpo da solicitação (@RequestBody) e todos os cabeçalhos de solicitação (@RequestHeader) em um interceptor antes de passar para o controlador, pode fazer assim:

java
Copy code
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new RequestValidationInterceptor())
                .addPathPatterns("/webhook");
    }
}
Aqui está o RequestValidationInterceptor que realiza a validação:

java
Copy code
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;

public class RequestValidationInterceptor extends HandlerInterceptorAdapter {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        // Verificar se todos os headers necessários estão presentes
        List<String> requiredHeaders = Arrays.asList("Digest", "Host", "Signature", "Signature-Input");
        for (String header : requiredHeaders) {
            if (request.getHeader(header) == null) {
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Header " + header + " ausente");
                return false;
            }
        }

        // Verificar se o corpo da solicitação está presente
        String requestBody = ServletUtils.extractRequestBody(request);
        if (requestBody == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Corpo da solicitação ausente");
            return false;
        }

        // Aqui você pode realizar qualquer outra validação necessária
        // Por exemplo, validar os formatos dos dados, verificar a autenticidade dos cabeçalhos, etc.

        // Se todos os dados estiverem presentes e válidos, permitir que a chamada continue para o controlador
        return true;
    }
}
Neste interceptor, todos os cabeçalhos necessários são verificados para garantir que estejam presentes na solicitação. Além disso, o corpo da solicitação também é verificado. Se algum dos dados estiver ausente, o interceptor retornará um erro de solicitação ruim (400) para indicar que a solicitação está incompleta ou malformada. Você pode estender este interceptor para adicionar qualquer outra lógica de validação necessária para os dados da solicitação.
